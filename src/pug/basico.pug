extends templates/_catalogo
include helpers/_mixins

block content
  div
    include templates/_navbar.pug

  #scroll 
    section.first 
      .slides-home.slides-horizontal.container-fluid#first
        .abajo#abajo
          img(src="assets/images/catalogo/basico/Scroll_B.svg")
        .slide.row.align-items-center
            .image.col-md-6.animate__animated.animate__fadeIn
                include svg/catalogo/basico/medidas.pug
                img(src="assets/images/catalogo/basica.png")
            .info.col-md-6.d-md-flex.flex-column.animate__animated.animate__fadeIn
                .titulo-1.primary-color.mt-auto Básica
                .subtitulo-1.secondary-color Ideal para que tu negocio
                    br
                    | sea el más cool.
                .content.mb-auto.pe-5
                    p Sus dimensiones son tan accesibles que ocupan muy poco espacio dentro de restaurantes pequeños, food courts o cafeterías, incluso puedes instalarla debajo de la barra del bar.
                    p Haz tu servicio más eficiente sirviendo el hielo directamente de la máquina, al ubicarla cerca de donde se preparan las bebidas. 
                    p De tamaño compacto y fácil manejo, tienes una alta eficiencia en producción de hielo con bajo consumo de energía.   
    section.horizontal 
      #loader.vertical
        li(onclick="changeSlidesH(0)")
          include svg/servicios/sliderload.pug
        li(onclick="changeSlidesH(1)")
          include svg/servicios/sliderload.pug
        li(onclick="changeSlidesH(2)")
          include svg/servicios/sliderload.pug
        
      //- .horizontal
      //-   img(src="assets/images/catalogo/Lados_B.svg")

      section.panel.horizontal-info.kg#detalles.first.active
        .content.container.slide-1
          .d-flex.w-100
            .icon.circle#circle
              include svg/catalogo/basico/circle.pug
              img(src="assets/images/catalogo/basico/Kilos_Hielo_B.svg")
              img(src="assets/images/catalogo/Kilos_Contorno_B.svg").contorno
            .text.subtitulo-3
              | De 70 a 120 Kilos 
              strong.secondary-color diarios.
      section.panel.horizontal-info.cubo#cubo
        .content.container.slide-1
          .d-flex.w-100
            .icon
              include svg/catalogo/diagrama.pug
            .text.subtitulo-3
              | Cubo tipo 
              strong.secondary-color media luna 
              | individual.    
  
      section.panel.horizontal-info.hasta#kilos
        .content.container.slide-1
          .d-flex.w-100
            .icon
              include svg/catalogo/deposito.pug
            .text.subtitulo-3
              | Concentra 
              strong.secondary-color 35 Kilos 
              | en su depósito.
    section.vertical
      .detalles.container-fluid.active
        .row.active
          section.panel.col-md-6.text.d-md-flex.align-items-center.justify-content-center.uno.vertical
            div
              .subtitulo-2
                span.white-color HIELO
                br
                span.primary-color SANITIZADO
              .texto-2.white-color Con su eficaz sistema higiénico obtienes un excelente hielo purificado listo para consumo.
          section.panel.col-md-6.image.d-md-flex.align-items-center.justify-content-center.panel.dos.vertical
            img(src="assets/images/catalogo/basico/Sanitizado_B.svg")
    section.vertical
      .detalles.container-fluid
        .row
          section.panel.unoB.vertical.col-md-6.text.d-md-flex.align-items-center.justify-content-center
            div
              .subtitulo-2 
                span.white-color EVAPORADOR 
                br
                span.primary-color DE ACERO 
                  | INOXIDABLE
              .texto-2.white-color Por medio de una constante regulación en la temperatura, se adapta al medio ambiente de tu establecimiento.
          section.panel.dosB.vertical.col-md-6.image.d-md-flex.align-items-center.justify-content-center
            img(src="assets/images/catalogo/basico/Evaporador_B.svg")
    section.vertical
      .detalles.container-fluid
        .row
          section.panel.unoC.vertical.col-md-6.text.d-md-flex.align-items-center.justify-content-center
            div
              .subtitulo-2
                span.white-color FÁCIL 
                br
                span.primary-color MANTENIMIENTO
              .texto-2.white-color Consérvala en óptimas condiciones y obtén el mayor rendimiento sin tantas complicaciones.
          section.panel.dosC.vertical.col-md-6.image.d-md-flex.align-items-center.justify-center
            img(src="assets/images/catalogo/basico/Mantenimiento_B.svg")
    section.scroll
      include templates/content/catalogo/quotes
      .container.subtitulo-2.primary-color REQUERIMIENTOS
      .grid.mt-2
        include templates/content/catalogo/grid-catalogo

  //- #scroll
    
  
  //- #cursorChange.hori
    
  //- #vertical.vertical.vertical-1
    
  //- #vertical.vertical
    
  //- #vertical.vertical.verticalLast
    

  
  
  script.
    const div = document.querySelector("#detalles")
    const test = document.querySelector("body")
    const verticalLast = document.querySelector("#vertical.vertical.verticalLast")
    const scroll = document.querySelector("#quotes")
    let circle = document.getElementById("pathCircle")
    let body = document.getElementById("bodyCatalogo")
    const scrollDivs = document.getElementById("scroll").childNodes
    let first = false 
    let horizontal = false 
    let vertical = false 
    let scrollOver = false
    let slideBtns = scrollDivs[2].childNodes[1].childNodes

    // SCROLL ON BTN CLICK
    document.getElementById("abajo").addEventListener("click", () => {
      scrollDivs[2].scrollIntoView()
    }, false)

    function cleanActiveSlideBtns() {
      slideBtns.forEach(slide => {
        if(slide.classList.contains("active")){
          slide.classList.remove("active")
        }
      });
    }

    function isInViewport(el) {
      const rect = el.getBoundingClientRect();
      console.log(rect)
      return (
          rect.top >= 0 &&
          rect.left >= 0 &&
          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
          rect.right <= (window.innerWidth || document.documentElement.clientWidth)

      );
    }

    // CHECK FIRST DIV
    const observerFirst = new IntersectionObserver((entries) => {
       entries.forEach(entry => {
        if (entry.isIntersecting) {
          first = true
          document.body.classList.add("active")
        } else {
          first = false
        }
      });
    }, {
      root: null,
      rootMargin: '0px',
      threshold: 1,
    }).observe(scrollDivs[1]);


    // CHECK HORIZONTAL DIV
    const observerHorizontal = new IntersectionObserver((entries) => {
       entries.forEach(entry => {
        if (entry.isIntersecting) {

          slideBtns.forEach(slide => {
            if(slide.classList.contains("active")){
              slide.classList.remove("active")
            }
          });

          if(!vertical) {
            counter = 0;
            slideBtns[0].classList.add("active");
          } else {
            counter = 2
            vertical = false
            slideBtns[2].classList.add("active");
          }
          circle.classList.add("active")
          document.body.classList.add("active")
          horizontal = true
        } else {
          horizontal = false
        }
      });
    }, {
      root: null,
      rootMargin: '0px',
      threshold: 1,
    }).observe(scrollDivs[2]);

    // CHECK VERTICAL DIV
    new IntersectionObserver((entries) => {
       entries.forEach(entry => {
        if (entry.isIntersecting) {
          counter = 0
          document.body.classList.add("active")
          vertical = true
        } else {
          //- vertical = false
        }
      });
    }, {
      root: null,
      rootMargin: '0px',
      threshold: 1,
    }).observe(scrollDivs[3]);

    // CHECK LAST VERTICAL DIV
    new IntersectionObserver((entries) => {
       entries.forEach(entry => {
        if (entry.isIntersecting) {
          counter = 2
          document.body.classList.add("active")
          vertical = true
          if(timer){
            timer.stop();
          }
          window.scrollTo(0, scrollDivs[5].offsetTop)
          if(scrollOver){
            scrollDivs[5].childNodes[0].classList.add("active")
            scrollDivs[5].childNodes[0].childNodes[0].classList.add("active")
          }
        } else {
          //- vertical = false
        }
      });
    }, {
      root: null,
      rootMargin: '-5px',
      threshold: 0,
    }).observe(scrollDivs[5]);

    // CHECK SCROLL
    function doMagic(e) {
      if(!scrolled){
        scrolled = true;
        goTo(e)
        setTimeout(function () { scrolled = false; }, 1000);
      };
    }

    document.body.addEventListener('wheel', doMagic)
    

    function changeSlidesH(slide) {
      counter = slide
      slideBtns.forEach(slide => {
        if(slide.classList.contains("active")){
          slide.classList.remove("active")
        }
      });
      slideBtns[counter].classList.add("active");
      scrollDivs[2].childNodes.forEach((slide, index) => {
        if(index > 0) {
          if(slide.classList.contains("active")){
            slide.classList.remove("active");
          }
          if(slide.classList.contains("remove")){
            slide.classList.remove("remove");
          }
        }
        
      });
      scrollDivs[2].childNodes[counter + 2].classList.add("active")
      scrollDivs[2].childNodes[counter + 1].classList.add("remove")
    }



    function goTo(e){
      if(e.deltaY < 0){
        //SCROLL UP
        if(vertical && counter === 0) {
          counter === 2
          window.scrollTo(0, scrollDivs[2].offsetTop)
        } else if(horizontal && counter === 0) {
          window.scrollTo(0, scrollDivs[1].offsetTop)
        } else if(horizontal && !vertical){
          slideBtns.forEach(slide => {
            if(slide.classList.contains("active")){
              slide.classList.remove("active")
            }
          });
          counter--
          slideBtns[counter].classList.add("active");
          scrollDivs[2].childNodes[counter + 3].classList.remove("active")
          scrollDivs[2].childNodes[counter + 2].classList.add("active")
          scrollDivs[2].childNodes[counter + 3].classList.remove("remove")
          scrollDivs[2].childNodes[counter + 2].classList.remove("remove")
        } else if(vertical && counter > 0){
          
          counter--
          window.scrollTo(0, scrollDivs[counter + 3].offsetTop)
          scrollDivs[counter + 3].childNodes[0].classList.add("active")
          scrollDivs[counter + 3].childNodes[0].childNodes[0].classList.add("active")
        }
      } else {
        // SCROLL DOWN
        if(first){
          window.scrollTo(0, scrollDivs[2].offsetTop)
        }
        if(horizontal) {
          slideBtns.forEach(slide => {
            if(slide.classList.contains("active")){
              slide.classList.remove("active")
            }
          });
          counter++
          if(counter === 3) {
            window.scrollTo(0, scrollDivs[3].offsetTop)
          } else {
            slideBtns[counter].classList.add("active");
            scrollDivs[2].childNodes[counter + 2].classList.add("active")
            scrollDivs[2].childNodes[counter + 1].classList.add("remove")
          }
        }
        if(vertical) {
          counter++
          if(counter === 3) {
            window.scrollTo(0, scrollDivs[6].offsetTop)
          } else {
            window.scrollTo(0, scrollDivs[counter + 3].offsetTop)
            scrollDivs[counter + 3].childNodes[0].classList.add("active")
            scrollDivs[counter + 3].childNodes[0].childNodes[0].classList.add("active")
            scrollDivs[counter + 2].childNodes[0].classList.remove("active")
            scrollDivs[counter + 2].childNodes[0].childNodes[0].classList.remove("active")
          }
        }
      }
    }


    function Timer(fn, t) {
        var timerObj = setInterval(fn, t);

        this.stop = function() {
            if (timerObj) {
                clearInterval(timerObj);
                timerObj = null;
            }
            return this;
        }

        // start timer using current settings (if it's not already running)
        this.start = function() {
            if (!timerObj) {
                this.stop();
                timerObj = setInterval(fn, t);
            }
            return this;
        }

        // start with new or original interval, stop current interval
        this.reset = function(newT = t) {
            t = newT;
            return this.stop().start();
        }
      
      }

    setTimeout(()=> {
      document.getElementById("medidas").classList.add("active");
    }, 200)

    let counter = 0


    

    function callbackVertical(entries, observer) {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          counter = 4
          document.body.classList.add("active")
        }
      });
    }

    // QUOTES SLIDER
    let slides = document.querySelectorAll('#quotes .content')
    let btns = document.querySelectorAll('#loader.quotes li')
    let num = 0
    let start = false
    let timer
    const observerOverflow = new IntersectionObserver((entries) => {
       entries.forEach(entry => {
        if (entry.isIntersecting) {
          vertical = false
          document.body.classList.remove("active")
          for(let b = 0; b < btns.length; b++) {
            btns[b].classList.remove("active")
          }
          for(let a = 0; a < slides.length; a++){
            slides[a].classList.remove("active")
            slides[a].classList.remove("remove")
          }
          slides[0].classList.add("active")
          btns[0].classList.add("active")
          if(!start) {
            timer = new Timer(function() {
                slideInterval()
            }, 4000);
          }
          if(start && timer){
            timer.start();
          }
          scrollOver = true
          start = true  
        }
      });
    }, {
      root: null,
      rootMargin: '0px',
      threshold: 1,
    }).observe(scroll);

    
    function slideInterval() {
        for(let b = 0; b < btns.length; b++) {
          btns[b].classList.remove("active")
        }
        num++
        if(num === 5){
          for(let a = 0; a < slides.length; a++){
            slides[a].classList.remove("active")
            slides[a].classList.remove("remove")
          }
          slides[0].classList.add("active")
          num = 0
        }
        btns[num].classList.add("active")
        slides[num].classList.add("active")      
        slides[num].classList.remove("remove")      
        slides[num - 1].classList.remove("active")      
        slides[num - 1].classList.add("remove")      
      }
      
    let x = 0
    var scrolled = false;
    